<%= component_wrapper do %>
  <%= primer_form_with(
    id: FORM_ID,
      model: @relation,
      **submit_url_options,
      data: { turbo: true,
              controller: STIMULUS_CONTROLLER,
              application_target: "dynamic" }
    ) do |f| %>
    <%# Form fields section %>
    <%= flex_layout(my: 3) do |flex|
        flex.with_row do
          if @base_errors&.any?
            render(Primer::Alpha::Banner.new(mb: 3, icon: :stop, scheme: :danger)) { @base_errors.join("\n") }
          end
        end
        flex.with_row do
          relation = @relation
          target_work_package = related_work_package
          stimulus_controller = STIMULUS_CONTROLLER
          i18n_namespace = I18N_NAMESPACE
          dialog_id = DIALOG_ID
          not_parent_child_relation = not_parent_child_relation?
          to_id_field_test_selector = TO_ID_FIELD_TEST_SELECTOR
          to_id_field_value = relation.to.present? ? "#{target_work_package.type.name.upcase} ##{target_work_package.id} - #{target_work_package.subject}" : nil
          render_inline_form(f) do |my_form|
            if relation.persisted?
              my_form.text_field(
                name: :to_id,
                label: WorkPackage.model_name.human,
                visually_hide_label: false,
                value: to_id_field_value,
                readonly: true
              )
            else
              my_form.hidden(
                name: :relation_type,
                value: relation.relation_type
              )

              my_form.work_package_autocompleter(
                name: :to_id,
                label: WorkPackage.model_name.human,
                visually_hide_label: false,
                autocomplete_options: {
                  resource: 'work_packages',
                  searchKey: 'subjectOrId',
                  openDirectly: false,
                  focusDirectly: false,
                  dropdownPosition: 'bottom',
                  appendTo: "##{dialog_id}",
                  data: { test_selector: to_id_field_test_selector}
                }
              )
            end

            if not_parent_child_relation
              my_form.text_field(
                name: :description,
                label: Relation.human_attribute_name(:description),
                hidden: relation.description.blank?,
                data: { "#{stimulus_controller}-target": "descriptionField" }
              )
            end
          end
        end
      end %>
    <%# Actions section %>
    <%= flex_layout(my: 3) do |flex|
        flex.with_row do
          if not_parent_child_relation? && @relation.description.blank?
            render(Primer::Beta::Button.new(
              scheme: :secondary,
              title: I18n.t("#{I18N_NAMESPACE}.label_add_description"),
              data: { action: "#{STIMULUS_CONTROLLER}#toggleDescriptionField",
                     "#{STIMULUS_CONTROLLER}-target": "descriptionButton" }
            )) do |button|
              button.with_leading_visual_icon(icon: :plus)
              I18n.t("#{I18N_NAMESPACE}.label_add_description")
            end
          end
        end
      end %>
  <% end %>
<% end %>
