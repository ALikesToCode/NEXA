<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<%=
  render Primer::OpenProject::PageHeader.new do |header|
    header.with_title { t(:label_information_plural) }
    header.with_breadcrumbs( [
                               { href: project_overview_path(@project.id), text: @project.name  },
                               { href: project_settings_general_path(@project.id), text: I18n.t("label_project_settings") },
                               t(:label_information_plural)
                             ])

    if User.current.allowed_in_project?(:add_subprojects, @project)
      header.with_action_button(scheme: :primary,
                                   mobile_icon: :plus,
                                   mobile_label: t(:label_subproject_new),
                                   aria: { label: t(:label_subproject_new) },
                                   title: t(:label_subproject_new),
                                   tag: :a,
                                   href: new_project_path(parent_id: @project.id)) do |button|
        button.with_leading_visual_icon(icon: :plus)
        t(:label_subproject)
      end
    end

    header.with_action_button(tag: :a,
                              mobile_icon: :pencil,
                              mobile_label: t('projects.settings.change_identifier'),
                              size: :medium,
                              href: project_identifier_path(@project),
                              aria: { label: t('projects.settings.change_identifier') },
                              title: t('projects.settings.change_identifier')) do |button|
      button.with_leading_visual_icon(icon: :pencil)
      t('projects.settings.change_identifier')
    end

    header.with_action_menu(
      menu_arguments: {
        anchor_align: :end
      },
      button_arguments: {
        icon: "op-kebab-vertical",
        "aria-label": t(:label_more)
      }
    ) do |menu|
      if @project.copy_allowed?
        menu.with_item(
          label:t(:button_copy),
          href: copy_project_path(@project),
          content_arguments: { data: { turbo: false }, },
          accesskey: accesskey(:copy),
          ) do |item|
          item.with_leading_visual_icon(icon: :copy)
        end
      end

      if User.current.allowed_in_project?(:archive_project, @project)
        menu.with_item(
          tag: :a,
          label: t(:button_archive),
          href: project_archive_path(@project, status: '', name: @project.name),
          content_arguments: { data: { confirm: t('project.archive.are_you_sure', name: @project.name), method: :post, } }
        ) do |item|
          item.with_leading_visual_icon(icon: 'lock')
        end
      end
      if User.current.admin?
        label = @project.templated ? 'remove_from_templates' : 'make_template'
        menu.with_item(
          tag: :a,
          label: t("project.template.#{label}"),
          href: project_templated_path(@project),
          content_arguments: { data: { method: @project.templated ? :delete : :post } }
        ) do |item|
          item.with_leading_visual_icon(icon: @project.templated ? :"file-removed" : :"file-added")
        end

        menu.with_item(
          tag: :a,
          scheme: :danger,
          label: t(:button_delete),
          href: confirm_destroy_project_path(@project),
          content_arguments: { data: { turbo: false } }
        ) do |item|
          item.with_leading_visual_icon(icon: :trash)
        end
      end
    end
  end
%>
